@model IndexPatientViewModel
@{
	ViewData["Title"] = "Mes Patients";
}

@if (TempData["SuccessMessage"] != null)

{
	<div id="tempMessage" class="alert alert-success">
		@TempData["MessageSucces"]
	</div>
}

@if (TempData["MessageErreur"] != null)
{
	<div id="tempMessage" class="alert alert-danger">
		@TempData["MessageErreur"]
	</div>
}

<h1 style="text-align:center">
	Liste des patients
</h1>

<div>
	<div>
		<a asp-action="Ajouter" asp-controller="Patient" class="btn btn-primary">Créer un patient</a>
	</div>

	<div class="col-10 align-items-center justify-content-between d-inline-flex">
		<input type="text" class=" col-4 form-control" id="RechercheEntree" placeholder="Rechercher par nom ou prénom..."
			   value="@ViewData["FiltreActuel"]" />

		<a href="@Url.Action("Index", new { Filtre = ViewData["FiltreActuel"], sortBy = "nom", sortDir = ViewData["SortDir"]?.ToString() == "asc" ? "desc" : "asc" })"
		   class="text-decoration-none @(ViewData["ActiveSort"]?.ToString() == "nom" ? "fw-bold" : "")">
			Trier par nom
			@if (ViewData["ActiveSort"]?.ToString() == "nom")
			{
				<i class="bi @(ViewData["SortDir"]?.ToString() == "asc" ? "bi-arrow-up" : "bi-arrow-down")"></i>
			}
		</a>

		<a href="@Url.Action("Index", new { Filtre = ViewData["FiltreActuel"], sortBy = "prenom", sortDir = ViewData["SortDir"]?.ToString() == "asc" ? "desc" : "asc" })"
		   class="text-decoration-none @(ViewData["ActiveSort"]?.ToString() == "prenom" ? "fw-bold" : "")">
			Trier par prénom
			@if (ViewData["ActiveSort"]?.ToString() == "prenom")
			{
				<i class="bi @(ViewData["SortDir"]?.ToString() == "asc" ? "bi-arrow-up" : "bi-arrow-down")"></i>
			}
		</a>

		<a href="@Url.Action("Index", new {Filtre = ViewData["FiltreActuel"], sortBy = "age", sortDir = ViewData["SortDir"]?.ToString() == "asc" ? "desc" : "asc" })"
		   class="text-decoration-none @(ViewData["ActiveSort"]?.ToString() == "age" ? "fw-bold" : "")">
			Trier par âge
			@if (ViewData["ActiveSort"]?.ToString() == "age")
			{
				<i class="bi @(ViewData["SortDir"]?.ToString() == "asc" ? "bi-arrow-up" : "bi-arrow-down")"></i>
			}
		</a>
	</div>
</div>

<div id="patientListContainer" class="row mt-3">
	@foreach (var p in Model.Patients)
	{
		<div class="col-md-4 mb-3">
			<div class="card">
				<div class="row">
					<img class="card-img-top fixed-dimension" src="@Url.Action("ObtenirPhoto", "Patient", new { id = p.PatientId })" alt="Photo du patient">
				</div>

				<div class="card-body">
					<h5 class="card-title">@p.NomComplet</h5>
					<p class="card-text">Âge : @(@p.Age) ans</p>
					<a asp-action="Detail" asp-controller="Patient" asp-route-id="@p.PatientId">
						<i class="bi bi-eye"></i>
					</a>
					<a asp-action="Editer" asp-controller="Patient" asp-route-id="@p.PatientId">
						<i class="bi bi-pencil"></i>
					</a>
					<a href="#" data-toggle="modal" data-target="#exampleModalCenter">
						<i class="bi bi-trash"></i>
					</a>

					<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
						<div class="modal-dialog modal-dialog-centered" role="document">
							<div class="modal-content">
								<div class="modal-header">
									<h5 class="modal-title" id="exampleModalLongTitle">Confirmation de suppression</h5>
									<button type="button" class="close" data-dismiss="modal" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
								<div class="modal-body">
									Êtes-vous sûr de vouloir supprimer @p.Nom @p.Prenom ?
								</div>
								<div class="modal-footer">
									<button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
									<a asp-action="Supprimer" asp-controller="Patient" asp-route-id="@p.PatientId" class="btn btn-danger">Supprimer</a>
								</div>
							</div>
						</div>
					</div>

				</div>
			</div>
		</div>
	}
</div>

<div class="d-flex justify-content-center">
	@Html.PagedListPager(Model.Patients, page => Url.Action("Index", new { page, Filtre = ViewData["FitlreActue"], SortBy = ViewData["ActiveSort"], sortDir = ViewData["SortDir"] }))
</div>


<script>
	window.addEventListener('DOMContentLoaded', (event) => {
		const tempMessage = document.getElementById("tempMessage");
		if (tempMessage) {
			setTimeout(() => {
				tempMessage.style.display = "none";
			}, 3000);
		}
	});
</script>

<script>
	const RechercheEntree = document.getElementById('RechercheEntree');
	let timeoutId;

	RechercheEntree.addEventListener('input', (e) => {
		clearTimeout(timeoutId);
		timeoutId = setTimeout(MajPatient(e), 500);
	});

	function MajPatient(e) {
		const requete = e.target.value;
		const Url = '@Url.Action("Index")' + '?Filtre=' + encodeURIComponent(requete);

		history.pushState(null, '', Url);

		fetch(Url, {
			headers: { 'X-Requested-With': 'XMLHttpRequest' }
		})
			.then(response => response.text())
			.then(html => {
				const tempDiv = document.createElement('div');
				tempDiv.innerHTML = html;
				const PatientsFiltres = tempDiv.querySelector('#patientListContainer').innerHTML;
				document.getElementById('patientListContainer').innerHTML = PatientsFiltres;
			});
	}
</script>
